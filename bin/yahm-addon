#!/bin/bash
#
# Leonid Kogan <leon@leonsio.com>
# Yet Another Homematic Management 
#
# Addons management script, install or remove addons for YAHM
#

# Stop on Errors
set -e

ADDON=""

# Hilfe Output
show_help ()
{
cat << EOF
YAHM addons management script

Usage Example: 

./yahm-addon [FLAG] COMMAND
./yahm-addon -n mycccu -m addon_name install

Flags:
-f          - Force operation (no halt on errors).
-v          - Verbose output 
-a          - Addon name

Commands:
install     - Enable addon
uninstall   - Disable addon
update      - Update addon
available   - Show available addon
installed   - Show installed addon
EOF
exit 1
}

PARAMETER="a:vf"

# Include laden
source /opt/YAHM/share/include.sh

mkdir -p ${YAHM_LIB_ADDONS}

fail_inprogress()
{
    cat ${LOG_FILE}
    error "\n$(timestamp) [HOST] [${ADDON}] Initial setup exiting with an error!\n\n"
    info "Trying to rollback installed addon. To cancel this operation type CTRL+C you have 5 seconds..."
    countdown
    info "... too late ;)"
    # set force
    IS_FORCE=1
    # run uninstall
    _do_action "uninstall"

}

#trap fail_inprogress EXIT SIGINT SIGTERM

_addon_installed()
{
    ADDON_NAME=$1
    if [ -e ${YAHM_LIB_ADDONS}/${ADDON_NAME} ] ; then
        echo 1    
    else
        echo 0 
    fi
}

available_addons()
{
    local description
    echo ""
    progress "Available addons:"
    files=`ls ${YAHM_DIR}/share/addons/`
    for file in $files
    do
        if [ "${file}" = "LICENSE" ] || [ "${file}" = "README.md" ]
        then
            continue
        fi

        if [[ -f ${YAHM_DIR}/share/addons/${file}/${file}_yahm_conf.sh ]]
        then
            description=`cat ${YAHM_DIR}/share/addons/${file}/${file}_yahm_conf.sh  | grep description -m1 | cut -d'"' -f2`
            if [ $(cat ${YAHM_DIR}/share/addons/${file}/${file}_yahm_conf.sh | grep addon_internal | wc -l ) -eq 1 ]
            then
                continue
            fi
            printf "\t%-20s%s\n" "$file" "$description"
        fi
    done
    echo ""
}

installed_addons()
{
    local description
    progress "Installed addons:"
    files=`ls ${YAHM_LIB_ADDONS}/`
    for file in $files
    do
        description=`cat ${YAHM_DIR}/share/addons/${file}/${file}_yahm_conf.sh  | grep description -m1 | cut -d'"' -f2`
        printf "\t%-20s%s\n" "$file" "$description"
    done
}

###############
#   Install   #
###############

_do_pre_install()
{
    local FILE=$1

    source ${YAHM_DIR}/share/addons/${FILE}/${FILE}_yahm_conf.sh

    for required in $addon_required
    do
        echo "REQ $required"
        if [ `_addon_installed ${required}` -eq 0 ]
        then
            if [ $addon_required_autoinstall -eq 1 ]
            then
                progress "Installing required addon: $required"
                _do_action_install $required
            else
                die "ERROR: Addon ${required} must be installed first"
            fi
        fi
    done
}

_do_action_install()
{
    local FILE=$1
    local ACTION_FUNCTION="_${FILE}_install"

    _do_pre_install $FILE

    progress "Executing ${FILE}_install()"
    source ${YAHM_DIR}/share/addons/${FILE}/${FILE}_yahm_installer.sh

    # Action
    $ACTION_FUNCTION

    _do_post_install $FILE

}

_do_post_install()
{
    local FILE=$1

    if [ $(cat ${YAHM_DIR}/share/addons/${FILE}/${FILE}_yahm_conf.sh | grep addon_internal | wc -l ) -eq 0 ]
    then
        touch ${YAHM_LIB_ADDONS}/${FILE}
    fi
}


#################
#   Uninstall   #
#################

_do_pre_uninstall()
{
    progress "Executing ${FILE}_pre_uninstall()"
    # liste aller installierten addons besorgen
}


_do_action_uninstall()
{
    local FILE=$1
    local ACTION_FUNCTION="_${FILE}_uninstall"

    echo "ADDON_UNINSTALL: $FILE"

    _do_pre_uninstall $FILE

    progress "Executing ${FILE}_uninstall()"
    source ${YAHM_DIR}/share/addons/${FILE}/${FILE}_yahm_installer.sh

    info  "uninstall"
    # Action
    $ACTION_FUNCTION

    _do_post_uninstall $FILE
}

_do_post_uninstall()
{
    rm ${YAHM_LIB_ADDONS}/${ADDON}
}

#################
#   Update   #
#################
_do_pre_update()
{
    progress "Executing ${FILE}_pre_update()"

}

_do_action_update()
{
    local FILE=$1
    local ACTION_FUNCTION="_${FILE}_update"

    _do_pre_update $FILE

    progress "Executing ${FILE}_update()"
    source ${YAHM_DIR}/share/addons/${FILE}/${FILE}_yahm_installer.sh

    # Action
    $ACTION_FUNCTION

    _do_post_update $FILE
}

_do_post_update()
{
    progress "Executing ${FILE}_post_update()"
}


##########################

_do_action()
{
    local ACTION=$1
    local ACTION_FUNCTION="_do_action_${ACTION}"

    mkdir -p /var/log/yahm/addons/
    LOG_FILE=/var/log/yahm/addons/${ADDON}_${ACTION}.log

#    if [ $IS_VERBOSE -eq 1 ]
#    then
#        LOG_ACTION="tee -a $LOG_FILE"
#    else
#        LOG_ACTION="dd oflag=append conv=notrunc status=none of=$LOG_FILE"
#    fi

    if [ "$ADDON" = "" ]
    then
        die "ERROR: Please specify addon name with -m ADDON_NAME, show available addons with 'yahm-addon available'"
    fi

    # validation checks
    if [ "${ACTION}" = "install" ]
    then
        if [ `_addon_installed $ADDON` -eq 1 ] && [ $IS_FORCE -ne 1 ]
        then
            die "ERROR: Addon ${ADDON} is already installed, use -f to overwrite it"
        fi
    else
        if [ `_addon_installed $ADDON` -eq 0 ] && [ $IS_FORCE -ne 1 ]
        then
            die "ERROR: Addon ${ADDON} is not installed, please install it first or use -f force this operation"
        fi
    fi

    $ACTION_FUNCTION $ADDON

}

#if [[ $# != 1 ]]; then
#    show_help
#fi

for key in "$@"; do
    case $key in
        install)
            shift
            [ "$1" = "--" ] && shift
            _do_action "install"
            break;
        ;;
        uninstall)
            shift
            [ "$1" = "--" ] && shift
            _do_action "uninstall"
            break;
        ;;
        update)
            shift
            [ "$1" = "--" ] && shift
            _do_action "update"
            break;
        ;;
        available)
            available_addons
            shift
            break;
        ;;  
        installed)
            installed_addons
            shift
            break;
        ;;
        *)
            show_help
            exit 0
        ;;
    esac
done

